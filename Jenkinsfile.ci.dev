pipeline {
    // 파이프라인을 어떤 노드에서 실행할지 결정
    agent any

    // Jenkinsfile에서 관리되는 매개변수 -> 버전관리 가능
    parameters {
        string(name: 'AWS_REGION', defaultValue: 'ap-northeast-2', description: 'AWS Region')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '842675972665', description: 'AWS Account ID')
        string(name: 'DOCKER_IMAGE_TAG', defaultValue: 'latest', description: 'ECR 태그')
        choice(name: 'PROFILE', choices: ['stg', 'prod'], description: '배포 환경')
    }
    
    tools {
        jdk "amazon-corretor-jdk17"
    }
    
    // 환경 변수
    environment {
        AWS_REGION = "${params.AWS_REGION}"
        AWS_ACCOUNT_ID = "${params.AWS_ACCOUNT_ID}"
        AWS_ECR_REPOSITORY = "search-opensearch-api-${params.PROFILE}"
        AWS_ECR_URL = "${params.AWS_ACCOUNT_ID}.dkr.ecr.${params.AWS_REGION}.amazonaws.com/${AWS_ECR_REPOSITORY}"
        DOCKER_IMAGE = "${AWS_ECR_URL}:${params.DOCKER_IMAGE_TAG}"
    }

    stages {
        // Print Parameters
        stage("Debug") {
            steps {
                echo "================================================"
                echo "> Check Environment Variables"
                echo "AWS_REGION: ${params.AWS_REGION}"
                echo "AWS_ACCOUNT_ID: ${params.AWS_ACCOUNT_ID}"
                echo "AWS_ECR_REPOSITORY: ${AWS_ECR_REPOSITORY}"
                echo "AWS_ECR_URL: ${AWS_ECR_URL}"
                echo "DOCKER_IMAGE_TAG: ${params.DOCKER_IMAGE_TAG}"
                echo "DOCKER_IMAGE: ${DOCKER_IMAGE}"
                echo "PROFILE: ${params.PROFILE}"
                echo "================================================"
                echo "> Check Java Version"
                sh "java --version"
                echo "================================================"
                echo "> Check Docker Version"
                sh "docker --version"
                echo "================================================"
            }
        }
        
        // Git Clone 수행
        stage("Git Clone") {
            steps { 
                echo "================================================"
                echo "> Git Clone 수행"
                git credentialsId: "github-credentials-id", 
                branch: "master",
                url: "https://github.com/ym1085/springboot-jenkins-pipeline"
                echo "================================================"
            }
        }

        // Gradle Build 수행
        stage("Gradle Build") {
            steps {
                echo "================================================"
                echo "> Gradle 빌드 수행"
                sh "chmod +x ./gradlew"
                sh "./gradlew clean build -x test"
                echo "================================================"
            }
        }

        // Docker build 수행
        stage("Docker build") {
            steps {
                echo "================================================"
                echo "> Docker 빌드 수행"
                sh "docker build -t ${DOCKER_IMAGE} ."
                echo "================================================"
            }
        }

        // ECR Login
        stage("ECR Login") {
            steps { 
                echo "================================================"
                echo "> ECR Login"
                sh """
                aws ecr get-login-password --region ${AWS_REGION} | \
                docker login --username AWS --password-stdin ${AWS_ECR_URL}
                """
                echo "================================================"
            }
        }

        // ECR Push
        stage("ECR Push") {
            steps {
                echo "================================================"
                echo "> ECR Push"
                sh "docker push ${DOCKER_IMAGE}"
                echo "================================================"
            }
        }
    }

    post {
        success {
            echo "================================================"
            echo "✅ Success Build"
            echo "================================================"
        }
        failure {
            echo "================================================"
            echo "❌ Fail Build"
            echo "================================================"
        }
    }
}